def construct_mx_topology(root_user = '',root_pass = '',mx_user = ''):
    """ this function used to construct topology of MX environemnt,will create auto_user.vars file """
    
    import os
    import paramiko
    import global_variables
    import basic_class
    
    if root_user:
        root_account = root_user
    else:
        root_account = global_variables.get_value ('root_account') 
    
    if root_pass:
        root_passwd = root_pass
    else:
        root_passwd =  global_variables.get_value ('root_passwd')  
    
    if mx_user:
        mx_account = mx_user
    else:
        mx_account = global_variables.get_value ('mx_account')  
        
    basic_class.mylogger_record.debug('root_account = '+str(root_account))
    basic_class.mylogger_record.debug('root_passwd = '+str(root_passwd))
    basic_class.mylogger_record.debug('mx_account = '+str(mx_account))
    
    # Check if auto-user.vars file exist
    initialpath,mx_seed_host_nums = global_variables.get_values ('initialpath','mx_seed_host_nums') 
    basic_class.mylogger_record.debug('target path = '+str(initialpath+'/etc/auto-user.vars'))
    exist_flag_auto_vars = os.path.exists(initialpath+'/etc/auto-user.vars')
    basic_class.mylogger_record.debug('exist_flag_auto_vars = '+str(exist_flag_auto_vars))
    # Determine if need create a new file
    if exist_flag_auto_vars:
        ctime_auto_vars = os.path.getctime(initialpath+'/etc/auto-user.vars')  # create time of auto-user.vars
        mtime_manu_vars = os.path.getmtime(initialpath+'/etc/manu-user.vars')  # last modify time of manu-user.vars
        basic_class.mylogger_record.debug('ctime_auto_vars = '+str(ctime_auto_vars))
        basic_class.mylogger_record.debug('mtime_manu_vars = '+str(mtime_manu_vars))
        
        if mtime_manu_vars >= ctime_auto_vars:  # mesans manu-user.vars have been modified
            regenerate_flag = 1                   # create auto-user.vars again      
            basic_class.mylogger_record.debug('regenerate_flag = '+str(regenerate_flag))
            basic_class.mylogger_record.info('Regenerating auto-user.vars again ...')
        else:                                   # skip to create auto-user.vars 
            regenerate_flag = 0                 
            basic_class.mylogger_record.debug('regenerate_flag = '+str(regenerate_flag))
            basic_class.mylogger_record.info('Skip Regenerating auto-user.vars ...')
    else:                                       # create auto-user.vars if not exist
        regenerate_flag = 1
        basic_class.mylogger_record.debug('regenerate_flag = '+str(regenerate_flag))
        basic_class.mylogger_record.info('Regenerating auto-user.vars again ...')
                
    if regenerate_flag == 1:   
        total = [] # used to store all fetched variabled
        host_dict,port_dict,addr_dict,cass_dict ={},{},{},{}
        allhost_common_user_home = ''
        
        for xyz in range(int(mx_seed_host_nums)):
            seed_host = global_variables.get_value('mx_seed_host{}_ip'.format(xyz+1))
            basic_class.mylogger_record.debug('seed_host = '+str(seed_host))
            ssh_allhost = paramiko.SSHClient()
            ssh_allhost.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_allhost.connect(seed_host,22,root_account,root_passwd)
            
            
            tmp_cmd1='cat /etc/passwd|grep '+mx_account+'|cut -d\':\' -f6'
            basic_class.mylogger_record.debug('tmp_cmd1 = '+str(tmp_cmd1))
            stdin,stdout1,stderr=ssh_allhost.exec_command(tmp_cmd1)
            if (len(stderr.read())==0):
                allhost_common_user_home=stdout1.read().strip().decode()
            else:
                basic_class.mylogger_record.error('SSH Error!')
                exit (1)
            basic_class.mylogger_record.debug('allhost_common_user_home = '+str(allhost_common_user_home))
                
            #get hosts and hosts, ip, addrs                
            tmp_cmd2 = 'source '+allhost_common_user_home+'/.profile;imconfget  -hosts | grep -v cluster|grep -v \' $\''
            basic_class.mylogger_record.debug('tmp_cmd2 = '+str(tmp_cmd2))
            stdin,stdout2,stderr=ssh_allhost.exec_command(tmp_cmd2)
            h_lists=stdout2.readlines()
            i = 0
            for h_list in h_lists:
                h_list = h_list.split()[0]
                key = 'mx'+str(xyz+1)+'_host'+str(i+1)
                value = str(h_list)
                addr_dict[key] = value
                tmp_cmd3="grep "+str(h_list)+" /etc/hosts|awk \'{print $1}\' | head -1"
                basic_class.mylogger_record.debug('tmp_cmd3 = '+str(tmp_cmd3))
                stdin,stdout3,stderr=ssh_allhost.exec_command(tmp_cmd3)
                tmpip=stdout3.readlines()
                key = 'mx'+str(xyz+1)+'_host'+str(i+1)+"_ip"
                value = ''.join(tmpip[0].split())
                addr_dict[key] = value
                i += 1
            
            
            tmp_cmd4 ='source '+allhost_common_user_home+'/.profile;imconfcontrol -ports'
            basic_class.mylogger_record.debug('tmp_cmd4 = '+str(tmp_cmd4))
            stdin,stdout4,stderr=ssh_allhost.exec_command(tmp_cmd4)
            if (len(stderr.read())==0):
                tmp_list = stdout4.readlines()
                for hostports in tmp_list:
                    tmp_a = hostports.split()
                    
                    if tmp_a[0].isdigit():
                        #print(tmp_a[2])
                        #print('===>'+str(tmp_a))
                        tmp_cmd5 = 'source '+allhost_common_user_home+'/.profile;imconfget -server '+ tmp_a[2]
                        basic_class.mylogger_record.debug('tmp_cmd5 = '+str(tmp_cmd5))
                        stdin,stdout5,stderr=ssh_allhost.exec_command(tmp_cmd5)
                        s_list=stdout5.readlines()
                        for serverhosts in s_list:
                            server_tmp=serverhosts.split()
                            #print(len(server_tmp))
                            if len(server_tmp) > 0:
                                #print('-->'+str(server_tmp))
                                for i in range(len(server_tmp)):
                                    #print('i='+str(i))
                                    key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_host'+str(i+1)
                                    value = server_tmp[i]
                                    host_dict[key] = value
                                    key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_host'+str(i+1)+'_ip'
                                    value = [addr_dict.get(k+'_ip') for k,v in addr_dict.items() if v == server_tmp[i]]
                                    host_dict[key] = value[0]
                                    #print(host_list)
                                    key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_host'+str(i+1)+'_'+tmp_a[3].replace('.','_')
                                    value = tmp_a[0]
                                    port_dict[key] = value
                                    #print(port_list)
                            else:
                                key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_'+tmp_a[3].replace('.','_')
                                value = tmp_a[0]
                                port_dict[key] = value                                           
                    else:   #skip the titles 
                        pass
            else:
                basic_class.mylogger_record.error('SSH Error!')
                exit (1)
                 
            #get cassandra info
            tmp_cmd6 = 'grep hostInfo '+allhost_common_user_home+'/config/config.db | cut -d \':\' -f 3'
            basic_class.mylogger_record.debug('tmp_cmd6 = '+str(tmp_cmd6))
            stdin,stdout6,stderr=ssh_allhost.exec_command(tmp_cmd6)
            b_n = stdout6.readlines()
            blobtier = b_n[0].split()[0]
            tmp_cmd7 = "grep "+str(blobtier)+" /etc/hosts|awk \'{print $1}\' | head -1"
            basic_class.mylogger_record.debug('tmp_cmd7 = '+str(tmp_cmd7))
            stdin,stdout7,stderr=ssh_allhost.exec_command(tmp_cmd7)
            tmp_ip = stdout7.readlines()
            blob_ip=tmp_ip[0].split()[0] 
            cass_dict['mx'+str(xyz+1)+'_cassblob_hosts'] =str(blobtier)
            cass_dict['mx'+str(xyz+1)+'_cassblob_ip'] = str(blob_ip) 
            
            tmp_cmd8 = 'grep cassandraMDCluster '+allhost_common_user_home+'/config/config.db | cut -d \'[\' -f 2| cut -d \']\' -f1 '
            basic_class.mylogger_record.debug('tmp_cmd8 = '+str(tmp_cmd8))
            stdin,stdout8,stderr=ssh_allhost.exec_command(tmp_cmd8)
            m_n = stdout8.readlines()
            metadata = m_n[0].split()[0]
            tmp_cmd9 = "grep "+str(metadata)+" /etc/hosts|awk \'{print $1}\' | head -1"
            stdin,stdout9,stderr=ssh_allhost.exec_command(tmp_cmd9)
            tmp_ip = stdout9.readlines()
            meta_ip = tmp_ip[0].split()[0]
            cass_dict['mx'+str(xyz+1)+'_cassmeta_hosts'] = str(metadata)
            cass_dict['mx'+str(xyz+1)+'_cassmeta_ip'] = str(meta_ip)
        
        
        user_var_file = open('etc/auto-user.vars', "w")
        #tmp_list=list(set(host_list+port_list+addr_list+cass_list))
        for tck ,tcv in sorted(addr_dict.items(),key=lambda addr_dict:addr_dict[0]):
            total.append(tck+' = '+tcv)
        for tck ,tcv in sorted(host_dict.items(),key=lambda host_dict:host_dict[0]):
            total.append(tck+' = '+tcv)        
        for tck ,tcv in sorted(port_dict.items(),key=lambda port_dict:port_dict[0]):       
            total.append(tck+' = '+tcv)          
        for tck ,tcv in sorted(cass_dict.items(),key=lambda cass_dict:cass_dict[0]):       
            total.append(tck+' = '+tcv)     
        basic_class.mylogger_record.debug('total = '+str(total))
        
        for item in sorted(total):
            user_var_file.write(item+"\n") 
        user_var_file.close()
    else:
        pass       
        
    basic_class.mylogger_record.debug('Importing auto-user.vars ...')          
    global_variables.import_variables_from_file([initialpath+'/etc/auto-user.vars'])# read auto generated users.vars 
    
    
    
    
    
    
    
    
    




def construct_mx_topology(root_user = '',root_pass = '',mx_user = ''):
    """ this function used to construct topology of MX environemnt,will create auto_user.vars file """
    
    import os
    import paramiko
    import global_variables
    import basic_class
    import remote_operations
    if root_user:
        root_account = root_user
    else:
        root_account = global_variables.get_value ('root_account') 
    
    if root_pass:
        root_passwd = root_pass
    else:
        root_passwd =  global_variables.get_value ('root_passwd')  
    
    if mx_user:
        mx_account = mx_user
    else:
        mx_account = global_variables.get_value ('mx_account')  
        
    basic_class.mylogger_record.debug('root_account = '+str(root_account))
    basic_class.mylogger_record.debug('root_passwd = '+str(root_passwd))
    basic_class.mylogger_record.debug('mx_account = '+str(mx_account))
    
    # Check if auto-user.vars file exist
    initialpath,mx_seed_host_nums = global_variables.get_values ('initialpath','mx_seed_host_nums') 
    basic_class.mylogger_record.debug('target path = '+str(initialpath+'/etc/auto-user.vars'))
    exist_flag_auto_vars = os.path.exists(initialpath+'/etc/auto-user.vars')
    basic_class.mylogger_record.debug('exist_flag_auto_vars = '+str(exist_flag_auto_vars))
    # Determine if need create a new file
    if exist_flag_auto_vars:
        ctime_auto_vars = os.path.getctime(initialpath+'/etc/auto-user.vars')  # create time of auto-user.vars
        mtime_manu_vars = os.path.getmtime(initialpath+'/etc/manu-user.vars')  # last modify time of manu-user.vars
        basic_class.mylogger_record.debug('ctime_auto_vars = '+str(ctime_auto_vars))
        basic_class.mylogger_record.debug('mtime_manu_vars = '+str(mtime_manu_vars))
        
        if mtime_manu_vars >= ctime_auto_vars:  # mesans manu-user.vars have been modified
            regenerate_flag = 1                   # create auto-user.vars again      
            basic_class.mylogger_record.debug('regenerate_flag = '+str(regenerate_flag))
            basic_class.mylogger_record.info('Regenerating auto-user.vars again ...')
        else:                                   # skip to create auto-user.vars 
            regenerate_flag = 0                 
            basic_class.mylogger_record.debug('regenerate_flag = '+str(regenerate_flag))
            basic_class.mylogger_record.info('Skip Regenerating auto-user.vars ...')
    else:                                       # create auto-user.vars if not exist
        regenerate_flag = 1
        basic_class.mylogger_record.debug('regenerate_flag = '+str(regenerate_flag))
        basic_class.mylogger_record.info('Regenerating auto-user.vars again ...')
                
    if regenerate_flag == 1:   
        total = [] # used to store all fetched variabled
        host_dict,port_dict,addr_dict,cass_dict ={},{},{},{}
        allhost_common_user_home = ''
        
        for xyz in range(int(mx_seed_host_nums)):
            seed_host = global_variables.get_value('mx_seed_host{}_ip'.format(xyz+1))
            basic_class.mylogger_record.debug('seed_host = '+str(seed_host))
            #ssh_allhost = paramiko.SSHClient()
            #ssh_allhost.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            #ssh_allhost.connect(seed_host,22,root_account,root_passwd)
            
            
            #tmp_cmd1='cat /etc/passwd|grep '+mx_account+'|cut -d\':\' -f6'
            #basic_class.mylogger_record.debug('tmp_cmd1 = '+str(tmp_cmd1))
            #stdin,stdout1,stderr=ssh_allhost.exec_command(tmp_cmd1)
            #if (len(stderr.read())==0):
            #    allhost_common_user_home=stdout1.read().strip().decode()
            #else:
            #    basic_class.mylogger_record.error('SSH Error!')
            #    exit (1)
            #basic_class.mylogger_record.debug('allhost_common_user_home = '+str(allhost_common_user_home))
                
            #get hosts and hosts, ip, addrs                
            tmp_cmd2 = 'imconfget  -hosts | grep -v cluster|grep -v \' $\''
            basic_class.mylogger_record.debug('tmp_cmd2 = '+str(tmp_cmd2))
            #stdin,stdout2,stderr=ssh_allhost.exec_command(tmp_cmd2)
            stdout2 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd2),0)
            h_lists=stdout2.readlines()
            i = 0
            for h_list in h_lists:
                h_list = h_list.split()[0]
                key = 'mx'+str(xyz+1)+'_host'+str(i+1)
                value = str(h_list)
                addr_dict[key] = value
                tmp_cmd3="grep "+str(h_list)+" /etc/hosts|awk \'{print $1}\' | head -1"
                basic_class.mylogger_record.debug('tmp_cmd3 = '+str(tmp_cmd3))
                #stdin,stdout3,stderr=ssh_allhost.exec_command(tmp_cmd3)
                stdout3 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd3),0)
                tmpip=stdout3.readlines()
                key = 'mx'+str(xyz+1)+'_host'+str(i+1)+"_ip"
                value = ''.join(tmpip[0].split())
                addr_dict[key] = value
                i += 1
            
            
            tmp_cmd4 = 'imconfcontrol -ports'
            basic_class.mylogger_record.debug('tmp_cmd4 = '+str(tmp_cmd4))
            #stdin,stdout4,stderr=ssh_allhost.exec_command(tmp_cmd4)
            stdout4 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd4),0)
            if (len(stderr.read())==0):
                tmp_list = stdout4.readlines()
                for hostports in tmp_list:
                    tmp_a = hostports.split()
                    
                    if tmp_a[0].isdigit():
                        #print(tmp_a[2])
                        #print('===>'+str(tmp_a))
                        tmp_cmd5 = 'source '+allhost_common_user_home+'/.profile;imconfget -server '+ tmp_a[2]
                        basic_class.mylogger_record.debug('tmp_cmd5 = '+str(tmp_cmd5))
                        #stdin,stdout5,stderr=ssh_allhost.exec_command(tmp_cmd5)
                        stdout5 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd5),0)
                        s_list=stdout5.readlines()
                        for serverhosts in s_list:
                            server_tmp=serverhosts.split()
                            #print(len(server_tmp))
                            if len(server_tmp) > 0:
                                #print('-->'+str(server_tmp))
                                for i in range(len(server_tmp)):
                                    #print('i='+str(i))
                                    key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_host'+str(i+1)
                                    value = server_tmp[i]
                                    host_dict[key] = value
                                    key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_host'+str(i+1)+'_ip'
                                    value = [addr_dict.get(k+'_ip') for k,v in addr_dict.items() if v == server_tmp[i]]
                                    host_dict[key] = value[0]
                                    #print(host_list)
                                    key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_host'+str(i+1)+'_'+tmp_a[3].replace('.','_')
                                    value = tmp_a[0]
                                    port_dict[key] = value
                                    #print(port_list)
                            else:
                                key = 'mx'+str(xyz+1)+'_'+tmp_a[2]+'_'+tmp_a[3].replace('.','_')
                                value = tmp_a[0]
                                port_dict[key] = value                                           
                    else:   #skip the titles 
                        pass
            else:
                basic_class.mylogger_record.error('SSH Error!')
                exit (1)
                 
            #get cassandra info
            tmp_cmd6 = 'grep hostInfo config/config.db | cut -d \':\' -f 3'
            basic_class.mylogger_record.debug('tmp_cmd6 = '+str(tmp_cmd6))
            #stdin,stdout6,stderr=ssh_allhost.exec_command(tmp_cmd6)
            stdout6 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd6),0)
            b_n = stdout6.readlines()
            blobtier = b_n[0].split()[0]
            tmp_cmd7 = "grep "+str(blobtier)+" /etc/hosts|awk \'{print $1}\' | head -1"
            basic_class.mylogger_record.debug('tmp_cmd7 = '+str(tmp_cmd7))
            #stdin,stdout7,stderr=ssh_allhost.exec_command(tmp_cmd7)
            stdout7 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd7),0)
            tmp_ip = stdout7.readlines()
            blob_ip=tmp_ip[0].split()[0] 
            cass_dict['mx'+str(xyz+1)+'_cassblob_hosts'] =str(blobtier)
            cass_dict['mx'+str(xyz+1)+'_cassblob_ip'] = str(blob_ip) 
            
            tmp_cmd8 = 'grep cassandraMDCluster config/config.db | cut -d \'[\' -f 2| cut -d \']\' -f1 '
            basic_class.mylogger_record.debug('tmp_cmd8 = '+str(tmp_cmd8))
            #stdin,stdout8,stderr=ssh_allhost.exec_command(tmp_cmd8)
            stdout8 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd8),0)
            m_n = stdout8.readlines()
            metadata = m_n[0].split()[0]
            tmp_cmd9 = "grep "+str(metadata)+" /etc/hosts|awk \'{print $1}\' | head -1"
            #stdin,stdout9,stderr=ssh_allhost.exec_command(tmp_cmd9)
            stdout9 = remote_operations.remote_operation(seed_host,root_account,root_passwd,'su - {0} -c \'{1}\''.format(mx_account,tmp_cmd9),0)
            tmp_ip = stdout9.readlines()
            meta_ip = tmp_ip[0].split()[0]
            cass_dict['mx'+str(xyz+1)+'_cassmeta_hosts'] = str(metadata)
            cass_dict['mx'+str(xyz+1)+'_cassmeta_ip'] = str(meta_ip)
        
        
        user_var_file = open('etc/auto-user.vars', "w")
        #tmp_list=list(set(host_list+port_list+addr_list+cass_list))
        for tck ,tcv in sorted(addr_dict.items(),key=lambda addr_dict:addr_dict[0]):
            total.append(tck+' = '+tcv)
        for tck ,tcv in sorted(host_dict.items(),key=lambda host_dict:host_dict[0]):
            total.append(tck+' = '+tcv)        
        for tck ,tcv in sorted(port_dict.items(),key=lambda port_dict:port_dict[0]):       
            total.append(tck+' = '+tcv)          
        for tck ,tcv in sorted(cass_dict.items(),key=lambda cass_dict:cass_dict[0]):       
            total.append(tck+' = '+tcv)     
        basic_class.mylogger_record.debug('total = '+str(total))
        
        for item in sorted(total):
            user_var_file.write(item+"\n") 
        user_var_file.close()
    else:
        pass       
        
    basic_class.mylogger_record.debug('Importing auto-user.vars ...')          
    global_variables.import_variables_from_file([initialpath+'/etc/auto-user.vars'])# read auto generated users.vars     