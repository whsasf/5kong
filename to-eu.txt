def construct_mx_topology(seed_host,root_account = 'root',root_passwd = 'letmein',mx_user = 'imail'):
    """ this function used to construct topology of MX environemnt """
    
    import os
    import paramiko
    
    Host = seed_host 
    root_account = root_account
    root_passwd = root_passwd    
    User = mx_user
    print('Host = '+Host)
    print('root_account = '+root_account)   
    print('root_passwd = '+root_passwd)
    print('User = '+User)

    total = []
    Host_dict,Port_dict,Addr_dict,Cass_dict ={},{},{},{}
    allHost_common_user_home = ''
    
    ssh_allHost = paramiko.SSHClient()
    ssh_allHost.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_allHost.connect(Host,22,root_account,root_passwd)

    
    tmp_cmd1='cat /etc/passwd|grep '+User+'|cut -d\':\' -f6'
    stdin,stdout1,stderr=ssh_allHost.exec_command(tmp_cmd1)
    if (len(stderr.read())==0):
        allHost_common_user_home=stdout1.read().strip().decode()
    else:
        print ('Error')
    print('allHost_common_user_home = '+str(allHost_common_user_home))
    

    #get hosts and hosts' ip addrs
    
    tmp_cmd2 = 'source '+allHost_common_user_home+'/.profile;imconfget  -hosts | grep -v cluster|grep -v \' $\''
    stdin,stdout2,stderr=ssh_allHost.exec_command(tmp_cmd2)
    h_lists=stdout2.readlines()
    i = 0
    for h_list in h_lists:
        h_list = h_list.split()[0]
        key = 'Host'+str(i+1)
        value = str(h_list)
        Addr_dict[key] = value
        tmp_cmd3="grep "+str(h_list)+" /etc/hosts|awk \'{print $1}\' | head -1"
        stdin,stdout3,stderr=ssh_allHost.exec_command(tmp_cmd3)
        tmpip=stdout3.readlines()
        key = 'Host'+str(i+1)+"_IP"
        value = ''.join(tmpip[0].split())
        Addr_dict[key] = value
        i += 1

    
    tmp_cmd4 ='source '+allHost_common_user_home+'/.profile;imconfcontrol -ports'
    stdin,stdout4,stderr=ssh_allHost.exec_command(tmp_cmd4)
    if (len(stderr.read())==0):
        tmp_list = stdout4.readlines()
        for hostports in tmp_list:
            tmp_a = hostports.split()
            
            if tmp_a[0].isdigit():
                #print(tmp_a[2])
                #print('===>'+str(tmp_a))
                tmp_cmd5 = 'source '+allHost_common_user_home+'/.profile;imconfget -server '+ tmp_a[2]
                stdin,stdout5,stderr=ssh_allHost.exec_command(tmp_cmd5)
                s_list=stdout5.readlines()
                for serverhosts in s_list:
                    server_tmp=serverhosts.split()
                    #print(len(server_tmp))
                    if len(server_tmp) > 0:
                        #print('-->'+str(server_tmp))
                        for i in range(len(server_tmp)):
                            #print('i='+str(i))
                            key = tmp_a[2]+'_host'+str(i+1)
                            value = server_tmp[i]
                            Host_dict[key] = value
                            key = tmp_a[2]+'_host'+str(i+1)+'_IP'
                            value = [Addr_dict.get(k+'_IP') for k,v in Addr_dict.items() if v == server_tmp[i]]
                            Host_dict[key] = value[0]
                            #print(Host_list)
                            key = tmp_a[2]+'_host'+str(i+1)+'_'+tmp_a[3]
                            value = tmp_a[0]
                            Port_dict[key] = value
                            #print(Port_list)
                               
            else:   #skip the titles 
                pass
    else:
        print ('Error')
         
    #get cassandra info
    tmp_cmd6 = 'grep hostInfo '+allHost_common_user_home+'/config/config.db | cut -d \':\' -f 3'
    stdin,stdout6,stderr=ssh_allHost.exec_command(tmp_cmd6)
    b_n = stdout6.readlines()
    blobtier = b_n[0].split()[0]
    tmp_cmd7 = "grep "+str(blobtier)+" /etc/hosts|awk \'{print $1}\' | head -1"
    stdin,stdout7,stderr=ssh_allHost.exec_command(tmp_cmd7)
    tmp_ip = stdout7.readlines()
    blob_ip=tmp_ip[0].split()[0] 
    Cass_dict['cassblob_hosts'] =str(blobtier)
    Cass_dict['cassblob_IP'] = str(blob_ip) 
    
    tmp_cmd8 = 'grep cassandraMDCluster '+allHost_common_user_home+'/config/config.db | cut -d \'[\' -f 2| cut -d \']\' -f1 '
    stdin,stdout8,stderr=ssh_allHost.exec_command(tmp_cmd8)
    m_n = stdout8.readlines()
    metadata = m_n[0].split()[0]
    tmp_cmd9 = "grep "+str(metadata)+" /etc/hosts|awk \'{print $1}\' | head -1"
    stdin,stdout9,stderr=ssh_allHost.exec_command(tmp_cmd9)
    tmp_ip = stdout9.readlines()
    meta_ip = tmp_ip[0].split()[0]
    Cass_dict['cassmeta_hosts'] = str(metadata)
    Cass_dict['cassmeta_IP'] = str(meta_ip)
    
    
    user_var_file = open('etc/auto-user.vars', "w")
    #tmp_list=list(set(Host_list+Port_list+Addr_list+Cass_list))
    for tck ,tcv in sorted(Addr_dict.items(),key=lambda Addr_dict:Addr_dict[0]):
        total.append(tck+' = '+tcv)
    for tck ,tcv in sorted(Host_dict.items(),key=lambda Host_dict:Host_dict[0]):
        #user_var_file.write(tck+' = '+tcv+"\n")
        total.append(tck+' = '+tcv)        
    for tck ,tcv in sorted(Port_dict.items(),key=lambda Port_dict:Port_dict[0]):       
        total.append(tck+' = '+tcv)          
    for tck ,tcv in sorted(Cass_dict.items(),key=lambda Cass_dict:Cass_dict[0]):       
        total.append(tck+' = '+tcv)     
    #print(total)
    for item in sorted(total):
        user_var_file.write(item+"\n") 
    user_var_file.close()